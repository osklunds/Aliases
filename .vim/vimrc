
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

filetype plugin on
filetype indent on


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" User Interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set number relativenumber
set cursorline
set colorcolumn=80
set foldcolumn=1
set so=7
set ruler
set cmdheight=1
set showtabline=2

set history=500
set hid

set backspace=eol,start,indent
set whichwrap+=<,>,h,l

set ignorecase
set smartcase

set hlsearch
set incsearch

set magic
set lazyredraw
set redrawtime=10000
set showmatch
set mat=2 " How many tenths of a second to blink when matching brackets

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

set wildmenu
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*
else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store

" Return to last edit position when opening files (You want this!)
augroup LastEditPos
    au!
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
augroup end
endif

set splitright


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Status Line
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set laststatus=2

set statusline=\ %F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l\ \ Column:\ %c
set noshowmode

" Copied from https://vi.stackexchange.com/questions/22398/disable-lightline-on-nerdtree
augroup filetype_nerdtree
    au!
    au FileType nerdtree call s:disable_lightline_on_nerdtree()
    au WinEnter,BufWinEnter,TabEnter * call s:disable_lightline_on_nerdtree()
augroup END

fu s:disable_lightline_on_nerdtree() abort
    let nerdtree_winnr = index(map(range(1, winnr('$')), {_,v -> getbufvar(winbufnr(v), '&ft')}), 'nerdtree') + 1
    call timer_start(0, {-> nerdtree_winnr && setwinvar(nerdtree_winnr, '&stl', '%#Normal#')})
endfu


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Text
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set encoding=utf8
set ffs=unix,dos,mac

set expandtab
set smarttab
set shiftwidth=4
set tabstop=4

set lbr
set tw=80

set autoindent
set smartindent
set wrap


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Colors
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

colorscheme PaperColor
set background=light

syntax enable


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Terminal equivalents
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

command! Ev :e ~/.vim/vimrc
command! Ra :so ~/.vim/vimrc

command! Gd :call GitDiff()

function! GitDiff()
    execute 'wincmd o'
    execute 'Gvdiffsplit'
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Key bindings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Misc
let mapleader = ","

nnoremap <leader>v <C-w>o<cr><C-w>v<cr>
noremap 0 ^

" Find and replace
vnoremap <leader>f "hy/<C-r>h

vnoremap <leader>r "hy:,$s/<C-r>h/<C-r>h/gc<left><left><left>
vnoremap <leader>R "hy:%s/<C-r>h/<C-r>h/gc<left><left><left>

" Would be better to map ?, but _? in langmap interfers
" with vim-commentary
nnoremap <silent> _ :noh<cr> 

" No arrow keys
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
inoremap <Up> <Nop>
inoremap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>

" Keyboard language layout
if has("mac") || has("macunix")
    set langmap=Ö:,-/,&^,€$,(*,Ä},*{,+-
else
    set langmap=Ö:,-/,&^,¤$,(*,Ä\",+-
endif

" Windows
noremap <C-j> <C-W>j
noremap <C-k> <C-W>k
noremap <C-h> <C-W>h
noremap <C-l> <C-W>l

" Spell Checking
noremap <leader>ss :setlocal spell!<cr>
noremap <leader>sn ]s
noremap <leader>sp [s
noremap <leader>sa zg
noremap <leader>s? z=


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vimdiff
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set diffopt=internal,filler,closeoff,context:10,algorithm:patience
nmap <leader>1 2<C-k><C-h>
nmap <leader>2 2<C-k><C-h><C-l>
nmap <leader>3 2<C-k><C-h><C-l><C-l>

nnoremap <leader>dn ]c
nnoremap <leader>dp [c

function! OpenMerged(merged_file)
    wincmd l
    wincmd l
    execute ':split ' . a:merged_file
    wincmd J
endfunction

function! CloseMerged()
    wincmd j
    execute ':q'
endfunction

function! ToggleMerged(merged_file)
    if !exists("t:merged_visible")
        let t:merged_visible = 0
    endif

    if t:merged_visible == 0
        let t:merged_visible = 1
        call OpenMerged(a:merged_file)
    else
        let t:merged_visible = 0
        call CloseMerged()
    endif
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Auto read and write/save
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:auto_save = 1
let g:auto_save_silent = 1

set autoread
if ! exists("g:CheckUpdateStarted")
    let g:CheckUpdateStarted=1
    call timer_start(1,'CheckUpdate')
endif
function! CheckUpdate(timer)
    silent! checktime
    call timer_start(1000,'CheckUpdate')
endfunction

set nobackup
set nowb
set noswapfile


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CtrlP
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Config
let g:ctrlp_switch_buffer = ''
let g:ctrlp_max_height = 20
let g:ctrlp_show_hidden = 1

if executable('rg')
    set grepprg=rg\ --color=never
    let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
    let g:ctrlp_use_caching = 1
endif

" Key bindings
nnoremap <leader>p :CtrlPLspDocumentSymbol<cr>
nnoremap <leader>o :CtrlPBuffer<cr>

nnoremap <leader>q :CtrlP cwd<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" fzf
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if executable('fzf')
    let g:fzf_history_dir = '~/.fzf_history'
    
    nnoremap <silent> <leader>q :Files<cr>
    nnoremap <silent> <leader>w :FileContents<cr>
    nnoremap <silent> <leader>W :Rg<cr>
    nnoremap <silent> <leader>e :BLines<cr>
    
    function! FileContentsFunc(query, fullscreen)
        let command_fmt = 'rg --column --line-number --no-heading --color=always -- %s || true'
        let initial_command = printf(command_fmt, shellescape(a:query))
        let reload_command = printf(command_fmt, '{q}')
        let spec = {'options': ['--disabled', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
        let spec = fzf#vim#with_preview(spec, 'right', 'ctrl-/')
        call fzf#vim#grep(initial_command, 1, spec, a:fullscreen)
    endfunction
    
    command! -nargs=* -bang FileContents call FileContentsFunc(<q-args>, <bang>0)
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-lsp
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Servers
if executable('rust-analyzer')
  au User lsp_setup call lsp#register_server({
        \   'name': 'Rust Language Server',
        \   'cmd': {server_info->['rust-analyzer']},
        \   'whitelist': ['rust'],
        \   'initialization_options': {
        \     'completion': {
        \       'autoimport': {
        \         'enable': v:false
        \       },
        \     },
        \   },
        \ })
endif

" Settings
let g:lsp_diagnostics_enabled = 0
let g:lsp_diagnostics_highlights_enabled = 0
let g:lsp_diagnostics_virtual_text_enabled = 0
let g:lsp_document_code_action_signs_enabled = 0
let g:lsp_signature_help_enabled = 0
let g:lsp_fold_enabled = 0
let g:lsp_diagnostics_highlights_enabled = 0
let g:lsp_diagnostics_highlights_insert_mode_enabled = 0
let g:lsp_diagnostics_signs_insert_mode_enabled = 0
let g:lsp_diagnostics_virtual_text_enabled = 0
let g:lsp_document_code_action_signs_enabled = 0
let g:lsp_document_highlight_enabled = 0

" Key bindings
nnoremap gd :LspDefinition<cr>
nnoremap <leader>gt :LspTypeDefinition<cr>
nnoremap <leader>gi :LspImplementation<cr>
nnoremap <leader>rs :LspRename<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" asyncomplete
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? asyncomplete#close_popup() . "\<cr>" : "\<cr>"
let g:asyncomplete_popup_delay = 0


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" conflict marker
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:conflict_marker_enable_mappings = 0
nnoremap <leader>cr :ConflictMarkerThemselves<CR>
nnoremap <leader>cl :ConflictMarkerOurselves<CR>
nnoremap <leader>cb :ConflictMarkerBoth<CR>
nnoremap <leader>cn :ConflictMarkerNextHunk<CR>
nnoremap <leader>cp :ConflictMarkerPrevHunk<CR>


let g:conflict_marker_highlight_group = ''

let g:conflict_marker_begin = '^<<<<<<< .*$'
let g:conflict_marker_end   = '^>>>>>>> .*$'

" See EOF for colors. They had to be there for some reaosn. Conflicts
" with colorscheme somehow


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Nerd Tree
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:NERDTreeWinPos = "right"
let NERDTreeShowHidden=1
let NERDTreeIgnore = ['\.pyc$', '__pycache__']
let g:NERDTreeWinSize=70
let g:NERDTreeQuitOnOpen = 3

noremap <leader>nn :NERDTreeToggle<cr>

augroup NerdTreeKeymap
  au!
  au FileType nerdtree nmap <buffer> <C-v> s
augroup end


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Lightline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:lightline = {
      \ 'colorscheme': 'PaperColorLightlineCustom',
      \ 'active': {
      \   'left': [ ['mode'],
      \             ['readonly', 'filename', 'modified'] ],
      \   'right': [ [ 'lineinfo' ], ['percent'] ]
      \ },
      \ 'inactive': {
      \   'left': [ ['mode'],
      \             ['readonly', 'filename', 'modified'] ],
      \   'right': [ [ 'lineinfo' ], ['percent'] ]
      \ },
      \ 'tabline': {
         \ 'left': [ [ 'tabs' ] ],
         \ 'right': [ [ 'cwd' ] ]
      \ },
      \ 'component': {
      \   'cwd': 'CWD: %{getcwd()}',
      \   'readonly': '%{&filetype=="help"?"":&readonly?"🔒":""}',
      \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
      \   'fugitive': '%{exists("*FugitiveHead")?FugitiveHead():""}'
      \ },
      \ 'component_visible_condition': {
      \   'readonly': '(&filetype!="help"&& &readonly)',
      \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
      \   'fugitive': '(exists("*FugitiveHead") && ""!=FugitiveHead())',
      \ },
      \ 'separator': { 'left': ' ', 'right': ' ' },
      \ 'subseparator': { 'left': ' ', 'right': ' ' }
      \ }

let g:lightline.tab = {
		    \ 'active': [ 'tabnum',  'tabname', 'modified' ],
		    \ 'inactive': [ 'tabnum',  'tabname', 'modified' ] }

let g:lightline.tab_component_function = {
            \  'tabname': 'TabName',
            \ }

function! TabName(n)
    if exists("g:is_merging")
        if a:n == 1
            return 'MERGED'
        elseif a:n == 2
            return 'BASE LOCAL'
        elseif a:n == 3
            return 'BASE REMOTE'
        elseif a:n == 4
            return 'LOCAL REMOTE'
        elseif a:n == 5
            return 'LOCAL BASE REMOTE'
        elseif a:n == 6
            return 'LOCAL MERGED'
        elseif a:n == 7
            return 'REMOTE MERGED'
        elseif a:n == 8
            return 'LOCAL MERGED REMOTE'
        else
            return 'error'
        endif
    else
        return lightline#tab#filename(a:n)
    endif
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-fugitive
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" The command and function wrappers for diffsplit are ugly, but I found no better
" way
exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gd exe MyDiffsplit(0, <bang>0, "vertical <mods>", <q-args>)'

function! MyDiffsplit(...) abort
    set nosplitright
    call call("fugitive#Diffsplit", a:000)
    set splitright
    wincmd l
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Stuff that needs to be in the end
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

augroup NoAutoComment
  au!
  au FileType * setlocal formatoptions=q
augroup end
